# Tox (https://tox.wiki/) - run tests in isolation using virtualenv.

[tox]
envlist =
    ruff
    py2{7}
    pypy2{7}
    py3{5,6,7,8,9,10,11}
    pypy3{8,9,10}
    package
    clean
requires = virtualenv<20.22.0

[testenv]
description = Unit tests and test coverage
deps =
    cli-test-helpers
    py27: mock
    pypy27: mock
    coverage[toml]
    pytest
commands =
    coverage run -m pytest {posargs}
    coverage xml
    coverage report

[testenv:black]
description = Ensure consistent code style
skip_install = true
deps = black
commands = black {posargs:--check --diff pyclean tests}

[testenv:clean]
description = Clean up bytecode and build artifacts
skip_install = true
deps = pyclean
commands = pyclean {posargs:. --debris cache coverage package pytest ruff --erase tests/junit-report.xml --yes}

[testenv:ensure_version_matches]
description = Verify package version is same as Git tag
deps =
commands = python -c 'import os; from importlib.metadata import version; pkg, tag = os.environ["PKG_NAME"], os.environ["GIT_TAG"]; ver = version(pkg); error = f"`{ver}` != `{tag}`"; abort = f"Package version does not match the Git tag ({error}). ABORTING."; raise SystemExit(0 if ver and tag and ver == tag else abort)'
setenv =
    PKG_NAME=pyclean
    GIT_TAG={posargs}

[testenv:license]
description = Manage license compliance
skip_install = true
deps = reuse
commands = reuse {posargs:lint}

[testenv:package]
description = Build package and check metadata (or upload package)
skip_install = true
deps =
    build
    twine
commands =
    python -m build
    twine {posargs:check --strict} dist/*
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY_URL

[testenv:ruff]
description = Lightening-fast linting for Python
skip_install = true
deps = ruff
commands = ruff {posargs:. --show-source}
